{"version":3,"sources":["components/profile_header/profile_header.js","components/profile_cover_photo/profile_cover_photo.js","App.js","serviceWorker.js","index.js"],"names":["ProfileHeader","showHeaderAt","window","addEventListener","handleScroll","className","href","console","log","scrollY","this","document","body","classList","add","remove","React","Component","ProfileCoverPhoto","canvas","canvasCtx","alphabetPath","alphabetTween","time","lastTime","steps","color","colorStep","sizeScale","querySelector","createCanvas","startDraw","id","version","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","style","display","fill","stroke","strokeMiterlimit","d","createElement","getContext","box","getAttribute","split","offsetWidth","Number","width","height","offsetHeight","prepend","myColor","chroma","scale","domain","grad","createLinearGradient","addColorStop","strokeStyle","lineWidth","lineCap","lineJoin","fillStyle","TweenMax","to","ease","Cubic","easeInOut","delay","onUpdate","svgPath","target","onDrawUpdate","onUpdateParams","circSize","fullCirc","Math","PI","pathLength","getTotalLength","currentPathTime","currentPoint","getPointAtLength","timeDiff","stepsDiff","round","i","tStep","tPathTime","goColor","tPoint","beginPath","arc","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2aac5f20.chunk.js","sourcesContent":["import React from 'react';\nimport './profile_header.css';\n\n\n\nexport default class ProfileHeader extends React.Component {\n\n    constructor(){\n        super();\n        this.showHeaderAt = 80;\n    }\n    \n\n    componentDidMount(){\n        window.addEventListener('scroll', ()=>{this.handleScroll()});\n    }\n\n    render() {\n        return (\n            <header className=\"header-fixed\">\n\n                <div className=\"header-limiter\">\n\n                    <h1><a href=\"#\">Zemin <span>Wang</span></a></h1>\n\n                    <nav>\n                        <a href=\"#\">ABOUT</a>\n                        <a href=\"#\" className=\"selected\">EXPERIENCE</a>\n                        <a href=\"#\">EDUCATION</a>                        \n                        <a href=\"#\">REFERENCES</a>\n                        <a href=\"#\">CONTACT</a>\n                    </nav>\n\n                </div>\n\n            </header>\n        );\n    }\n\n    handleScroll(){\n        console.log('listen', window.scrollY, this.showHeaderAt)\n        if(window.scrollY > this.showHeaderAt) {\n            document.body.classList.add(\"fixed\");\n        }\n        else {            \n            document.body.classList.remove(\"fixed\");\n        }\n        \n    }\n  }","import React from 'react';\nimport './profile_cover_photo.css'\n\nimport {TweenMax, Cubic} from \"gsap\";\n\nimport chroma from 'chroma-js';\n\nexport default class ProfileCoverPhoto extends React.Component {\n\n    constructor(){\n        super();        \n        //chroma = require('chroma-js');\n        this.canvas = null;\n        this.canvasCtx = null;\n        this.alphabetPath = null;\n        this.alphabetTween = { time:0, lastTime:0 };\n        this.steps = 600;\n        this.color = [\"#F16060\", \"#5C4B51\", \"#8CBEB2\", \"#F3B562\", \"#F16060\", \"#5C4B51\", \"#8CBEB2\", \"#F3B562\", \"#F16060\"];\n        this.colorStep = [0.1, 0.30, 0.6, 0.9];\n        this.sizeScale = 0.01;\n    }\n\n    componentDidMount(){\n        this.alphabetPath = document.querySelector(\".alphabets #alphabet-a path\");\n        this.createCanvas();\n        this.startDraw();\n    }\n\n    render(){\n        return (\n            <div className=\"holder\">\n                <h1 className=\"header\">Zemin Wang</h1>\n                <div className=\"alphabets\">\n                    <svg id=\"alphabet-a\"  version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 600\" enableBackground=\"new 0 0 1000 600\" xmlSpace=\"preserve\">\n                             <path  style={{display: 'none'}} fill=\"none\" stroke=\"#000000\" strokeMiterlimit=\"10\" d=\"M 100 250 Q 200 200 250 200 Q 100 350 100 450 Q 150 450 200 450 C 400 450 400 200 300 300 C 200 400 300 500 400 450 Q 400 350 450 300 Q 500 350 500 450 Q 550 300 600 300 Q 600 400 600 450 Q 700 400 700 300 Q 650 450 750 450 Q 750 400 750 350 Q 800 250 850 300 Q 850 400 900 450\"></path>\n                    </svg>\n                </div>\n            </div>\n        )\n    }\n\n    createCanvas () {\n        this.canvas = document.createElement('canvas');\n        this.canvasCtx = this.canvas.getContext(\"2d\");\n        this.canvas.id     = \"alphabets\";\n       \n        var box = document.querySelector(\".alphabets svg\").getAttribute('viewBox');\n        \n        box = box.split(/\\s+|,/);\n    \n        this.sizeScale = document.querySelector(\".alphabets\").offsetWidth/ Number(box[2]);\n        this.canvas.width  = document.querySelector(\".alphabets\").offsetWidth;\n        this.canvas.height = document.querySelector(\".alphabets\").offsetHeight;\n\n        //$(\"div.alphabets\").append(this.canvas);\n        document.querySelector(\"div.alphabets\").prepend(this.canvas);\n\n        //console.log( Number(box[2]), this.sizeScale , $(this.canvas).offsetWidth, $(this.canvas).offsetHeight );\n    }\n\n    // Cubic, TweenMax, chroma\n    startDraw () {\n\n        var myColor = chroma.scale(this.color).domain(this.colorStep);\n        //var currentPoint = alphabetPath.getPointAtLength(0);\n        //canvasCtx.moveTo(currentPoint.x, currentPoint.y);\n        var grad= this.canvasCtx.createLinearGradient(0, 0, 150, 150);\n        grad.addColorStop(0, \"red\");\n        grad.addColorStop(1, \"green\");\n        this.canvasCtx.strokeStyle = grad;\n        this.canvasCtx.lineWidth = 1;\n        this.canvasCtx.lineCap = \"round\";\n        this.canvasCtx.lineJoin=\"round\";\n        this.canvasCtx.fillStyle= this.color[0];\n    \n        TweenMax.to(this.alphabetTween, 10, {ease:Cubic.easeInOut, delay:2, time:1, onUpdate:(svgPath, target, myColor)=>{this.onDrawUpdate(svgPath, target, myColor)}, onUpdateParams:[this.alphabetPath, this.alphabetTween, myColor] });\n    \n    }\n\n    onDrawUpdate (svgPath, target, myColor) {\n       \n        var circSize = 18 * this.sizeScale;\n        var fullCirc = 2 * Math.PI;\n        var pathLength = svgPath.getTotalLength();\n        var currentPathTime = pathLength * target.time;\n        var currentPoint = svgPath.getPointAtLength(currentPathTime);\n        var timeDiff = target.time - target.lastTime;\n        var stepsDiff = Math.round ( this.steps * timeDiff );\n         for (var i =0; i< stepsDiff; i++) {\n             var tStep = timeDiff * (i/stepsDiff) + target.lastTime;\n            var tPathTime = pathLength * tStep;\n             \n             var goColor = myColor(tStep);\n            // console.log('inter up: ', tPathTime, target.time, target.lastTime); \n            var tPoint = svgPath.getPointAtLength(tPathTime);\n    \n            \n            this.canvasCtx.fillStyle= goColor;\n    \n            this.canvasCtx.beginPath();\n            this.canvasCtx.arc(tPoint.x * this.sizeScale, tPoint.y * this.sizeScale, circSize, 0, 2* fullCirc );\n            this.canvasCtx.fill();\n            // canvasCtx.stroke();\n         } \n            // console.log('onDrawUpdate', stepsDiff, currentPoint, target.time, target.lastTime); \n        this.canvasCtx.beginPath();\t\n        this.canvasCtx.arc(currentPoint.x * this.sizeScale, currentPoint.y * this.sizeScale, circSize, 0, 2* fullCirc );\n        this.canvasCtx.fill();\n        \n    \n        target.lastTime = target.time;\n    }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {ProfilePicture} from './components/profile_picture/profile_picture';\nimport ProfileHeader from './components/profile_header/profile_header';\nimport ProfileCoverPhoto from './components/profile_cover_photo/profile_cover_photo';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        <ProfileHeader />\n        <ProfileCoverPhoto/>\n        {/* <ProfilePicture url = '/profile_photo_01.png' altText='Zemin Wang'/> */}\n\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}