{"version":3,"sources":["components/profile_header/index.js","components/profile_cover_photo/index.js","components/profile_section/index.js","components/profile_about/index.js","components/profile_experience/index.js","components/profile_education/index.js","components/profile_reference/index.js","App.js","serviceWorker.js","index.js"],"names":["ProfileHeader","showHeaderAt","window","addEventListener","handleScroll","className","href","console","log","scrollY","this","document","body","classList","add","remove","React","Component","ProfileCoverPhoto","canvas","canvasCtx","alphabetPath","alphabetTween","time","lastTime","steps","color","colorStep","sizeScale","querySelector","createCanvas","startDraw","id","version","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","style","display","fill","stroke","strokeMiterlimit","d","createElement","getContext","box","getAttribute","split","offsetWidth","Number","width","height","offsetHeight","prepend","myColor","chroma","scale","domain","grad","createLinearGradient","addColorStop","strokeStyle","lineWidth","lineCap","lineJoin","fillStyle","TweenMax","to","ease","Cubic","easeInOut","delay","onUpdate","svgPath","target","onDrawUpdate","onUpdateParams","circSize","fullCirc","Math","PI","pathLength","getTotalLength","currentPathTime","currentPoint","getPointAtLength","timeDiff","stepsDiff","round","i","tStep","tPathTime","goColor","tPoint","beginPath","arc","ProfileSection","props","children","ProfileAbout","ProfileExperience","items","point","createSVGPoint","getCoordinates","e","svg","clientX","clientY","matrixTransform","getScreenCTM","inverse","Item","config","Object","keys","forEach","item","el","mouseMoveHandler","bind","touchMoveHandler","prototype","update","c","clip","setAttribute","preventDefault","touch","targetTouches","slice","call","querySelectorAll","index","push","button","currentTarget","preserveAspectRatio","cx","cy","r","dy","clipPath","xlinkHref","ProfileEducation","ProfileReference","align","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cab658b0.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\n\n\nexport default class ProfileHeader extends React.Component {\n\n    constructor(){\n        super();\n        this.showHeaderAt = 80;\n    }\n    \n\n    componentDidMount(){\n        window.addEventListener('scroll', ()=>{this.handleScroll()});\n    }\n\n    render() {\n        return (\n            <header className=\"header-fixed\">\n                <div className=\"header-limiter\">\n                    <h1><a href=\"#\">Zemin <span>Wang</span></a></h1>\n                    <nav>\n                        <a href=\"#about_section\">ABOUT</a>\n                        <a href=\"#experience_section\">EXPERIENCE</a>\n                        <a href=\"#education_section\">EDUCATION</a>\n                        <a href=\"#contact_section\">CONTACT</a>\n                    </nav>\n                </div>\n            </header>\n        );\n    }\n\n    handleScroll(){\n        console.log('listen', window.scrollY, this.showHeaderAt)\n        if(window.scrollY > this.showHeaderAt) {\n            document.body.classList.add(\"fixed\");\n        }\n        else {            \n            document.body.classList.remove(\"fixed\");\n        }\n        \n    }\n  }","import React from 'react';\nimport './style.css'\n\nimport {TweenMax, Cubic} from \"gsap\";\n\nimport chroma from 'chroma-js';\n\nexport default class ProfileCoverPhoto extends React.Component {\n\n    constructor(){\n        super();        \n        //chroma = require('chroma-js');\n        this.canvas = null;\n        this.canvasCtx = null;\n        this.alphabetPath = null;\n        this.alphabetTween = { time:0, lastTime:0 };\n        this.steps = 600;\n        this.color = [\"#F16060\", \"#5C4B51\", \"#8CBEB2\", \"#F3B562\", \"#F16060\", \"#5C4B51\", \"#8CBEB2\", \"#F3B562\", \"#F16060\"];\n        this.colorStep = [0.1, 0.30, 0.6, 0.9];\n        this.sizeScale = 0.01;\n    }\n\n    componentDidMount(){\n        this.alphabetPath = document.querySelector(\".alphabets #alphabet-a path\");\n        this.createCanvas();\n        this.startDraw();\n    }\n\n    render(){\n        return (\n            <div className=\"holder\">\n                <h1 className=\"header\">Zemin Wang</h1>\n                <div className=\"photo\"></div>\n                <div className=\"alphabets\">\n                    <svg id=\"alphabet-a\"  version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 600\" enableBackground=\"new 0 0 1000 600\" xmlSpace=\"preserve\">\n                             <path  style={{display: 'none'}} fill=\"none\" stroke=\"#000000\" strokeMiterlimit=\"10\" d=\"M 100 300 Q 150 50 200 300 Q 250 550 300 300 Q 350 50 400 300 C 450 550 450 50 500 300 C 550 50 550 550 600 300 A 50 50 0 1 1 700 300 \"></path>\n                    </svg>\n                </div>\n            </div>\n        )\n    }\n\n    createCanvas () {\n        this.canvas = document.createElement('canvas');\n        this.canvasCtx = this.canvas.getContext(\"2d\");\n        this.canvas.id     = \"alphabets\";\n       \n        var box = document.querySelector(\".alphabets svg\").getAttribute('viewBox');\n        \n        box = box.split(/\\s+|,/);\n    \n        this.sizeScale = document.querySelector(\".alphabets\").offsetWidth/ Number(box[2]);\n        this.canvas.width  = document.querySelector(\".alphabets\").offsetWidth;\n        this.canvas.height = document.querySelector(\".alphabets\").offsetHeight;\n\n        //$(\"div.alphabets\").append(this.canvas);\n        document.querySelector(\"div.alphabets\").prepend(this.canvas);\n\n        //console.log( Number(box[2]), this.sizeScale , $(this.canvas).offsetWidth, $(this.canvas).offsetHeight );\n    }\n\n    // Cubic, TweenMax, chroma\n    startDraw () {\n\n        var myColor = chroma.scale(this.color).domain(this.colorStep);\n        //var currentPoint = alphabetPath.getPointAtLength(0);\n        //canvasCtx.moveTo(currentPoint.x, currentPoint.y);\n        var grad= this.canvasCtx.createLinearGradient(0, 0, 150, 150);\n        grad.addColorStop(0, \"red\");\n        grad.addColorStop(1, \"green\");\n        this.canvasCtx.strokeStyle = grad;\n        this.canvasCtx.lineWidth = 1;\n        this.canvasCtx.lineCap = \"round\";\n        this.canvasCtx.lineJoin=\"round\";\n        this.canvasCtx.fillStyle= this.color[0];\n    \n        TweenMax.to(this.alphabetTween, 10, {ease:Cubic.easeInOut, delay:2, time:1, onUpdate:(svgPath, target, myColor)=>{this.onDrawUpdate(svgPath, target, myColor)}, onUpdateParams:[this.alphabetPath, this.alphabetTween, myColor] });\n    \n    }\n\n    onDrawUpdate (svgPath, target, myColor) {\n       \n        var circSize = 5 * this.sizeScale;\n        var fullCirc = 2 * Math.PI;\n        var pathLength = svgPath.getTotalLength();\n        var currentPathTime = pathLength * target.time;\n        var currentPoint = svgPath.getPointAtLength(currentPathTime);\n        var timeDiff = target.time - target.lastTime;\n        var stepsDiff = Math.round ( this.steps * timeDiff );\n         for (var i =0; i< stepsDiff; i++) {\n             var tStep = timeDiff * (i/stepsDiff) + target.lastTime;\n            var tPathTime = pathLength * tStep;\n             \n             var goColor = myColor(tStep);\n            // console.log('inter up: ', tPathTime, target.time, target.lastTime); \n            var tPoint = svgPath.getPointAtLength(tPathTime);\n    \n            \n            this.canvasCtx.fillStyle= goColor;\n    \n            this.canvasCtx.beginPath();\n            this.canvasCtx.arc(tPoint.x * this.sizeScale, tPoint.y * this.sizeScale, circSize, 0, 2* fullCirc );\n            this.canvasCtx.fill();\n            // canvasCtx.stroke();\n         } \n            // console.log('onDrawUpdate', stepsDiff, currentPoint, target.time, target.lastTime); \n        this.canvasCtx.beginPath();\t\n        this.canvasCtx.arc(currentPoint.x * this.sizeScale, currentPoint.y * this.sizeScale, circSize, 0, 2* fullCirc );\n        this.canvasCtx.fill();\n        \n    \n        target.lastTime = target.time;\n    }\n}","import React from 'react'\nimport './style.css'\n\nexport default class ProfileSection extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return (\n            <section id={this.props.id} className=\"App-section\">\n                {this.props.children}\n            </section>\n        )\n    }\n}","import React from 'react'\nimport './style.css';\n\nexport default class ProfileAbout extends React.Component {\n    constructor(){\n        super();\n    }\n\n    render(){\n        return (\n            <div className=\"profile-about\">\n                <header>\n                    <h1>About</h1>\n                </header>\n                \n                <div className=\"summary\">\n                    <p>\n                    I am an experienced full stack Web/Mobile development, looking for exciting projects and new opportunities.\n                    Over the last 8+ years, I have worked in all kinds of projects and I am able to build a web application from scratch very fast and with greate efficiency or continue working on existing code with ease.\n                    Finally but not least, my ultimate goal is to satisfy clients, deliver quality work and always on time.\n                    So if you have an exciting project and looking for a skillful developer, drop me a message and we will start working on your project asap.\n                    </p>                    \n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './style.css';\n\n\nexport default class ProfileExperience extends React.Component {\n\n    constructor(){\n\n        super();\n        this.items = [];\n\n\n        \n    }\n\n    componentDidMount(){\n        var point = document.querySelector('.profile-experience svg').createSVGPoint();\n\n        function getCoordinates(e, svg) {\n            point.x = e.clientX;\n            point.y = e.clientY;\n            return point.matrixTransform(svg.getScreenCTM().inverse());\n        }\n        \n        function Item(config) {\n            Object.keys(config).forEach(function (item) {\n                this[item] = config[item];\n            }, this);\n            this.el.addEventListener('mousemove', this.mouseMoveHandler.bind(this));\n            this.el.addEventListener('touchmove', this.touchMoveHandler.bind(this));\n        }\n        \n        Item.prototype = {\n            update: function update(c) {\n                this.clip.setAttribute('cx', c.x);\n                this.clip.setAttribute('cy', c.y);\n            },\n            mouseMoveHandler: function mouseMoveHandler(e) {\n                this.update(getCoordinates(e, this.svg));\n            },\n            touchMoveHandler: function touchMoveHandler(e) {\n                e.preventDefault();\n                var touch = e.targetTouches[0];\n                if (touch) return this.update(getCoordinates(touch, this.svg));\n            }\n        };\n        [].slice.call(document.querySelectorAll('.profile-experience .item'), 0).forEach((item, index) => {\n            this.items.push(new Item({\n                el: item,\n                svg: item.querySelector('.profile-experience svg'),\n                clip: document.querySelector('#clip-'+index+' circle'),\n            }));\n        });\n\n        [].slice.call(document.querySelectorAll('.profile-experience button'), 0).forEach((button) => {\n            button.addEventListener('click', function(e){document.body.className = e.currentTarget.className;});\n        });\n    }\n\n    render(){\n        \n        return (\n                <div className='profile-experience'>\n                    <header>\n                        <h1>My Experience</h1>\n                        <div className='small'>\n                            <h3>Skillsets</h3> \n                            <ul>\n                                <li>Core PHP</li>\n                                <li>Laravel</li>\n                                <li>NodeJS</li>\n                                <li>Django</li>\n                                <li>Flask</li>\n                                <li>ReactJS</li>\n                                <li>VueJS</li>\n                                <li>SQL</li>\n                                <li>Oracle</li>\n                                <li>Mongo</li>\n                                <li>GraphQL</li>\n                                <li>HTML/CSS</li>\n                                <li>JavaScript</li>\n                                <li>TypeScript</li>\n                                <li>React Native</li>\n                            </ul>\n                        </div>\n                    </header>\n                    <main>\n                        <div className='items'>\n                                <div className='item'>\n                                    <svg preserveAspectRatio='xMidYMid slice' viewBox='0 0 300 200'>\n                                        <defs>\n                                            <clipPath id='clip-0' >\n                                                <rect x=\"0\" y=\"0\" width=\"300px\" height=\"200px\"/>\n                                                <circle cx='0'  cy='0' fill='#000' r='150px'></circle>                                                \n                                            </clipPath>\n                                            \n                                        </defs>\n                                        <text className='svg-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                        </text>\n                                        <g className=\"item-container\" clipPath='url(#clip-0)'>\n                                            <image height='100%' preserveAspectRatio='xMinYMin slice' width='100%' xlinkHref='/update.png'></image>\n                                            <text className='svg-masked-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                            </text>\n                                        </g>\n                                    </svg>\n                                </div>\n                                <div className='item'>\n                                    <svg preserveAspectRatio='xMidYMid slice' viewBox='0 0 300 200'>\n                                        <defs>\n                                            <clipPath id='clip-1' >\n                                                <rect x=\"0\" y=\"0\" width=\"300px\" height=\"200px\"/>\n                                                <circle cx='0'  cy='0' fill='#000' r='150px'></circle>                                                \n                                            </clipPath>\n                                            \n                                        </defs>\n                                        <text className='svg-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                        </text>\n                                        <g className=\"item-container\" clipPath='url(#clip-1)'>\n                                            <image height='100%' preserveAspectRatio='xMinYMin slice' width='100%' xlinkHref='/update.png'></image>\n                                            <text className='svg-masked-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                            </text>\n                                        </g>\n                                    </svg>\n                                </div>\n                                <div className='item'>\n                                    <svg preserveAspectRatio='xMidYMid slice' viewBox='0 0 300 200'>\n                                        <defs>\n                                            <clipPath id='clip-2' >\n                                                <rect x=\"0\" y=\"0\" width=\"300px\" height=\"200px\"/>\n                                                <circle cx='0'  cy='0' fill='#000' r='150px'></circle>                                                \n                                            </clipPath>\n                                            \n                                        </defs>\n                                        <text className='svg-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                        </text>\n                                        <g className=\"item-container\" clipPath='url(#clip-2)'>\n                                            <image height='100%' preserveAspectRatio='xMinYMin slice' width='100%' xlinkHref='/update.png'></image>\n                                            <text className='svg-masked-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                            </text>\n                                        </g>\n                                    </svg>\n                                </div>\n                                <div className='item'>\n                                    <svg preserveAspectRatio='xMidYMid slice' viewBox='0 0 300 200'>\n                                        <defs>\n                                            <clipPath id='clip-3' >\n                                                <rect x=\"0\" y=\"0\" width=\"300px\" height=\"200px\"/>\n                                                <circle cx='0'  cy='0' fill='#000' r='150px'></circle>                                                \n                                            </clipPath>\n                                            \n                                        </defs>\n                                        <text className='svg-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                        </text>\n                                        <g className=\"item-container\" clipPath='url(#clip-3)'>\n                                            <image height='100%' preserveAspectRatio='xMinYMin slice' width='100%' xlinkHref='/update.png'></image>\n                                            <text className='svg-masked-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                            </text>\n                                        </g>\n                                    </svg>\n                                </div>\n                                <div className='item'>\n                                    <svg preserveAspectRatio='xMidYMid slice' viewBox='0 0 300 200'>\n                                        <defs>\n                                            <clipPath id='clip-4' >\n                                                <rect x=\"0\" y=\"0\" width=\"300px\" height=\"200px\"/>\n                                                <circle cx='0'  cy='0' fill='#000' r='150px'></circle>                                                \n                                            </clipPath>\n                                            \n                                        </defs>\n                                        <text className='svg-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                        </text>\n                                        <g className=\"item-container\" clipPath='url(#clip-4)'>\n                                            <image height='100%' preserveAspectRatio='xMinYMin slice' width='100%' xlinkHref='/update.png'></image>\n                                            <text className='svg-masked-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                            </text>\n                                        </g>\n                                    </svg>\n                                </div>\n                                <div className='item'>\n                                    <svg preserveAspectRatio='xMidYMid slice' viewBox='0 0 300 200'>\n                                        <defs>\n                                            <clipPath id='clip-5' >\n                                                <rect x=\"0\" y=\"0\" width=\"300px\" height=\"200px\"/>\n                                                <circle cx='0'  cy='0' fill='#000' r='150px'></circle>                                                \n                                            </clipPath>\n                                            \n                                        </defs>\n                                        <text className='svg-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                        </text>\n                                        <g className=\"item-container\" clipPath='url(#clip-5)'>\n                                            <image height='100%' preserveAspectRatio='xMinYMin slice' width='100%' xlinkHref='/update.png'></image>\n                                            <text className='svg-masked-text' dy='.3em' x='50%' y='50%'>\n                                            Updating...\n                                            </text>\n                                        </g>\n                                    </svg>\n                                </div>\n                        </div>\n                    </main>\n                </div>\n        )\n    }\n}","import React from 'react'\nimport './style.css';\n\nexport default class ProfileEducation extends React.Component {\n    constructor(){\n        super();\n    }\n\n    render(){\n        return (\n            <div className=\"profile-education\">\n                <h1>Education</h1>\n                <div className=\"edu-box\">\n                    <p><a className=\"univ-title\" href=\"https://en.wikipedia.org/wiki/Beijing_University_of_Technology\">Beijing University of Technology</a></p>\n                    <p className=\"univ-x\">Bachelor's degree, Computer Science (2013 ~ 2016)</p>                \n                </div>\n                \n            </div>\n        )\n    }\n}","import React from 'react'\nimport './style.css'\nexport default class ProfileReference extends React.Component {\n    constructor(){\n        super();\n    }\n\n    render(){\n        return (\n            <div className=\"profile-reference\">\n                <h1>Contact</h1>\n                <div className=\"contact-menu\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td align=\"center\" className=\"label\">Email</td>\n                                <td align=\"center\">win6win@outlook.com</td>\n                            </tr>\n                            <tr>\n                                <td align=\"center\" className=\"label\">Phone</td>\n                                <td align=\"center\" >+86 17810611470</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {ProfilePicture} from './components/profile_picture';\nimport ProfileHeader from './components/profile_header';\nimport ProfileCoverPhoto from './components/profile_cover_photo';\nimport ProfileSection from './components/profile_section';\nimport ProfileAbout from './components/profile_about'\nimport ProfileExperience from './components/profile_experience'\nimport ProfileEducation from './components/profile_education'\nimport ProfileReference from './components/profile_reference'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        <ProfileHeader />\n        <ProfileCoverPhoto/>\n        {/* <ProfilePicture url = '/profile_photo_01.png' altText='Zemin Wang'/> */}\n        <ProfileSection id=\"about_section\">\n            <ProfileAbout/>\n        </ProfileSection>\n        <ProfileSection id=\"experience_section\">\n            <ProfileExperience/>\n        </ProfileSection>\n        <ProfileSection id=\"education_section\">\n            <ProfileEducation/>\n        </ProfileSection>\n        <ProfileSection id=\"contact_section\">\n            <ProfileReference/>\n        </ProfileSection>        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}